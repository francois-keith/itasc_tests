# template deploy script, which can be called with corresponding bash script
require("print")

#### import components, requires correctly setup RTT_COMPONENT_PATH or ROS_PACKAGE_PATH
import("ocl")
import("kdl_typekit")
import("rtt_tf")
import("rtt_rosnode")

#import the iTaSC core
import("itasc_core")
#import a solver
import("wdls_prior_vel_solver")
#import robots and object
import("itasc_robot_pr2_test")
import("itasc_pr2")
import("naxes_motion_control")

#application level packages


#### load components
#### -------------------------------------------------------
# general components
loadComponent("Timer","OCL::TimerComponent")
#loadComponent("Reporter","OCL::FileReporting")
#loadComponent("event_firer","OCL::LuaComponent")

#load application level components (trajectory generators...)
loadComponent("test_supervisor","OCL::LuaComponent")
loadComponent("nAxes_generator", "motion_control::nAxesGeneratorPos")
#loadComponent("nAxes_controller", "motion_control::nAxesControllerPos")
loadComponent("TestComponent", "iTaSC::itasc_robot_pr2_test")

# robot components
loadComponent("Pr2Robot","iTaSC::pr2Robot")
loadComponent("pr2connector","iTaSC::pr2connect")

loadComponent("rtt_tf", "rtt_tf::RTT_TF")

#### set activities
#### -------------------------------------------------------
# create activity for producer: period=0.01, priority=0, sched type
### periodic activities (general and application level components)
setActivity("TestComponent",				0.01,	1, ORO_SCHED_OTHER)
setActivity("Timer",				0.01,	1, ORO_SCHED_OTHER)
setActivity("test_supervisor",				0.01,	1, ORO_SCHED_OTHER)
setActivity("nAxes_generator",				0.01,	1, ORO_SCHED_OTHER)
#setActivity("nAxes_controller",				0.01,	1, ORO_SCHED_OTHER)
setActivity("Pr2Robot",				0.01,	1, ORO_SCHED_OTHER)
setActivity("pr2connector",				0.01,	1, ORO_SCHED_OTHER)
setActivity("rtt_tf",				0.0,	1, ORO_SCHED_OTHER)

### non-periodic iTaSC activities

# to execute programs in the deployer, like connectToControllers
#setActivity("Deployer",				1.0,	98, ORO_SCHED_RT)

#### connect peers
#### -------------------------------------------------------

#connectPeers("test_supervisor","Solver")
addPeer("test_supervisor","Deployer")

connectPeers("test_supervisor","Timer")
connectPeers("test_supervisor","nAxes_generator")
connectPeers("test_supervisor","TestComponent")
connectPeers("test_supervisor","Pr2Robot")
connectPeers("test_supervisor","pr2connector")
#connectPeers("test_supervisor","nAxes_controller")
connectPeers("test_supervisor","rtt_tf")

connectPeers("nAxes_generator","Timer")
connectPeers("nAxes_generator","TestComponent")
connectPeers("nAxes_generator","Pr2Robot")
connectPeers("nAxes_generator","pr2connector")
#connectPeers("nAxes_generator","nAxes_controller")
connectPeers("nAxes_generator","rtt_tf")

connectPeers("TestComponent","Timer")
connectPeers("TestComponent","Pr2Robot")
connectPeers("TestComponent","pr2connector")
#connectPeers("TestComponent","nAxes_controller")
connectPeers("TestComponent","rtt_tf")

connectPeers("Timer","Pr2Robot")
connectPeers("Timer","pr2connector")
#connectPeers("Timer","nAxes_controller")
connectPeers("Timer","rtt_tf")

connectPeers("Pr2Robot","pr2connector")
#connectPeers("Pr2Robot","nAxes_controller")
connectPeers("Pr2Robot","rtt_tf")

#connectPeers("pr2connector","nAxes_controller")
connectPeers("pr2connector","rtt_tf")

#connectPeers("nAxes_controller","rtt_tf")

#everything connected to everything

#### lua stuff 
#### -------------------------------------------------------
# execute lua files
#(important that it is before loading property files) WHY?

test_supervisor.exec_file(rospack.find("itasc_robot_pr2_test") + "/scripts/test_supervisor.lua")

#configure lua components (already here so they can create the ports and properties before we connect/load them)

test_supervisor.configure

#### load property files
#### -------------------------------------------------------
loadService("test_supervisor","marshalling")
test_supervisor.marshalling.updateProperties(rospack.find("itasc_robot_pr2_test") + "/cpf/test_supervisor.cpf")
loadService("Pr2Robot","marshalling")
Pr2Robot.marshalling.updateProperties(rospack.find("itasc_pr2") + "/cpf/pr2robot.cpf")
loadService("pr2connector","marshalling")
pr2connector.marshalling.updateProperties(rospack.find("itasc_pr2") + "/cpf/pr2connect.cpf")
loadService("nAxes_generator","marshalling")
nAxes_generator.marshalling.updateProperties(rospack.find("naxes_motion_control") + "/cpf/nAxesGeneratorPos.cpf")

#test_supervisor.configure

#### connect ports
#### -------------------------------------------------------
# create connectionPolicies

var ConnPolicy cp

var ConnPolicy bufferedcp
bufferedcp.type=1
bufferedcp.size=32

var ConnPolicy bufferedcp2
bufferedcp2.type=1
bufferedcp2.size=32
bufferedcp2.lock_policy=1

# timer ports
#connect("test_supervisor.trigger","Timer.timeout",cp)

#connect ports of pr2 components
connect("Pr2Robot.q_from_robot", "pr2connector.q_msr_std", cp)
connect("Pr2Robot.qdot_to_robot", "pr2connector.qdot_in", cp)
connect("Pr2Robot.joint_names", "pr2connector.joint_names", cp)
connect("Pr2Robot.deltaqdot_in", "pr2connector.deltaqdot", cp)

#connect port to signal finished nAxesGenerator
connect("nAxes_generator.moveFinished", "test_supervisor.test_common_events_in", cp)

#connect ports to get info for tests
connect("test_supervisor.objectframes_out", "TestComponent.objectFramesPort", cp)
connect("TestComponent.q_names_in", "Pr2Robot.joint_names", cp)
connect("TestComponent.q_port_in", "Pr2Robot.q_port", cp)

#connect port for getting measured joint positions to generator
connect("nAxes_generator.nAxesSensorPosition", "TestComponent.msr_pos_out", cp)

#connect ports for steering robot
connect("test_supervisor.joint_positions_out", "nAxes_generator.nAxesJointPosition", cp)
connect("nAxes_generator.nAxesDesiredPosition", "TestComponent.qdot_in", cp)
connect("TestComponent.qdot_out","pr2connector.qdot_in", cp)

var ConnPolicy roscp
roscp.transport = 3
# connect the jointstate topic to the pr2connector
roscp.name_id = "/joint_states"
stream("pr2connector.joint_state_from_robot", roscp)
stream("TestComponent.joint_state_from_robot", roscp)

# configure timers
Timer.configure()

# start timers 
Timer.start()

# start the task supervisors
test_supervisor.start

